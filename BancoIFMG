    public void cadastrarJogador() {
        Scanner t = new Scanner(System.in);
        System.out.println("Informe o nome do jogador: ");
        String nomes = t.nextLine();
        this.nome = nomes;
        numJogador++;
        novoCadastro();
        if(numJogador > 6){
            menuInicial();
        }
    }

    public void novoCadastro() {
        Scanner t = new Scanner(System.in);
        System.out.println("Deseja cadastrar outro jogador(sim/nao)");
        String novoJogador;
        novoJogador = t.nextLine();
        if (novoJogador.equals("sim")) {
            cadastrarJogador();
        }
        if (novoJogador.equals("nao")) {
            verificarQtdJogadores();
        }

    }

    public void verificarQtdJogadores() {
        if (numJogador > 2 && numJogador < 7) {
            novoCadastro();
        }
        if (numJogador < 2) {
            System.out.println("Quantidade de jogador invalida. Cadastre pelo menos 2 jogadores para iniciar");
            cadastrarJogador();
        }
        if (numJogador > 6) {
            System.out.println("Quantidade de jogador possui ja cadastrada! ");
            menuInicial();
        }
    }



    public void acaoPropriedade(Posicao jogadores){ // Posicao Proprietario 
        
          Scanner t = new Scanner(System.in);
          String resposta;
        
          // Se a posição não POSSUIR dono.
        if(posicaoDoTabuleiro[jogadores.getPosicaoJogadorTabuleiro()].isTemDono() == false){
            System.out.println("Voce deseja adquirir a propriedade?? (sim/nao) ");
            
            resposta = t.nextLine();
            
            if(resposta.equals("sim")){
                // Setar essa posição como uma de suas propriedades. E descontar o valor dela em seu saldo.)
                //PróximaJogada()
            }else{
                if(!resposta.equals("sim")){
                    //PróximaJogada().
                }
            }      
        }
        
        //Se a posição POSSUIR DONO e o dono da propriedade foi o PRÓPRIO JOGADOR
      
        else if(posicaoDoTabuleiro[jogadores.getPosicaoJogadorTabuleiro()].isTemDono() == true  ) { // && posicaoDoTabuleiro[jogadores.getPosicaoJogadorTabuleiro()].getProprietario == 
            
        }   
            
        
    }


    // VERIFICA A CLASSE DA POSICAO 
    public void verificarTipoDaPosicaoTabuleiro(Posicao jogadoresCadastrados, Tabuleiro tabuleiro, int indice) {
        if (tabuleiro.casasDoTabuleiro[jogadoresCadastrados.retornaPosicaoJogador(indice)] instanceof Lote) {
            casoLote(jogadoresCadastrados, tabuleiro, indice);
        }
        if (tabuleiro.casasDoTabuleiro[jogadoresCadastrados.retornaPosicaoJogador(indice)] instanceof Companhia) {
            casoCompanhia(jogadoresCadastrados, tabuleiro, indice);
        }
        if (tabuleiro.casasDoTabuleiro[jogadoresCadastrados.retornaPosicaoJogador(indice)] instanceof Sorte) {
            casoSorteReves(jogadoresCadastrados, tabuleiro, indice);
        }
        if (tabuleiro.casasDoTabuleiro[jogadoresCadastrados.retornaPosicaoJogador(indice)] instanceof Fixo) {
            casoFixo(jogadoresCadastrados, tabuleiro, indice);
        }
        
    }

    
   
    public void casoLote(Posicao jogadoresCadastrados, Tabuleiro tabuleiro, int indice) {
        System.out.println("AQUI EH LOTE");
        
    }

    public void casoCompanhia(Posicao jogadoresCadastrados, Tabuleiro tabuleiro, int indice) {
        System.out.println("AQUI EH COMPANHIA ");
    }

    public void casoSorteReves(Posicao jogadoresCadastrados, Tabuleiro tabuleiro, int indice) {
        System.out.println("AQUI EH SORTE");
    }

    public void casoFixo(Posicao jogadoresCadastrados, Tabuleiro tabuleiro, int indice) {
        System.out.println("AQUI EH FIXO");
    }

}



                String nomeJogador = jogadoresCadastrados.retornNomeJogador(indice);
                int saldoJogador = jogadoresCadastrados.retornaSaldo(indice);
                int posicaoJogador = jogadoresCadastrados.retornaPosicaoJogador(indice);
                String propriedades = jogadoresCadastrados.retornaPropriedade(indice).isEmpty()
                    ? "Nenhuma propriedade adquirida."
                    : jogadoresCadastrados.retornaPropriedade(indice).toString();
                int maxContentLength = Math.max(
             Math.max(("Jogador: " + nomeJogador).length(), 
             ("Saldo: R$ " + saldoJogador).length()),
              Math.max(("Posição Atual: " + posicaoJogador).length(), 
             ("Propriedades: " + propriedades).length())
             );
                
                
                System.out.println("+-----------------------------------------------+");
                System.out.println("|               Jogo do Banco IFMG              |");
                System.out.println("+-----------------------------------------------+");
                System.out.printf("| Jogador: %-37s|\n", nomeJogador);
                System.out.printf("| Saldo: R$ %-36d|\n", saldoJogador);
                System.out.printf("| Posicao Atual: %-31d|\n", posicaoJogador);
                System.out.println("+-----------------------------------------------+");
                System.out.printf("| Propriedades: %-32s|\n", propriedades);
                System.out.println("+-----------------------------------------------+");
                System.out.println();
                System.out.println("""
                                 |------------------------------------------------|
                                 |       APERTE ENTER PARA JOGAR OS DADOS!!       |
                                 |------------------------------------------------|""");
                

    public void resetarPropriedades(Posicao jogadoresCadastrados, Tabuleiro tabuleiro, int indiceJogadorEliminado) {

        //Passo 1 - descobrir jogador a ser eliminado e excluir seu array list de propriedades(limpou o array list do jogador)
        jogadoresCadastrados.getJogadores().get(indiceJogadorEliminado).getPropriedades().clear();
        //Passo 2 - descadastrar as propriedades do indice dele(definir as propriedades como null)
        for (int posicaoVerificada = 0; posicaoVerificada < tabuleiro.casasDoTabuleiro.length; posicaoVerificada++) {
            //aqui eu passo por todas as casas
            if (tabuleiro.casasDoTabuleiro[posicaoVerificada].getIndiceDoDono() == indiceJogadorEliminado
                    && tabuleiro.casasDoTabuleiro[posicaoVerificada] instanceof Companhia) {
                //consegue descobrir se é dono ou não e se É uma companhia
                tabuleiro.casasDoTabuleiro[posicaoVerificada].setPosicaoTemDono(false);
                //definindo que ela não tem dono 
                tabuleiro.casasDoTabuleiro[posicaoVerificada].setNomeDoDono(null);
                //definiu nome igual a null

            }

            if (tabuleiro.casasDoTabuleiro[posicaoVerificada].getIndiceDoDono() == indiceJogadorEliminado
                    && tabuleiro.casasDoTabuleiro[posicaoVerificada] instanceof Lote) {
                //Verifico novamente se o indice do dono é o mesmo do jogador eliminado
                Posicao posicaoAtual = tabuleiro.casasDoTabuleiro[posicaoVerificada];
                Lote lote = (Lote) posicaoAtual; //Casting
                
                //Aqui eu reinicio o nivel de lote
                lote.nivel = 0;
                
                //falamos que não tem dono
                tabuleiro.casasDoTabuleiro[posicaoVerificada].setPosicaoTemDono(false);
                //falamos que é nullo o nome do dono
                tabuleiro.casasDoTabuleiro[posicaoVerificada].setNomeDoDono(null);
            }

        }
